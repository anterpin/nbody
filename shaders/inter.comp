#version 460


layout (local_size_x = 256) in;
layout (location = 1) uniform float G;
layout (location = 2) uniform float dt;
layout (location = 3) uniform float eps2;
layout (location = 4) uniform float damping;


layout (binding = 0, std430) buffer positions
{
  vec4 pos[];
};

layout (binding = 1, std430) buffer velocities
{
  vec4 vel[];
};

void main() {
    uint i = gl_GlobalInvocationID.x;
    uint n = pos.length();
    /* uint i = gl_LocalInvocationIndex; */
    if (i >= n) return;
    vec3 a = vec3(0);
    vec3 pi = pos[i].xyz;
    for (uint j = 0; j < n; j++) {
      vec3 r = pos[j].xyz - pi;
      float ds = dot(r, r) + eps2;
      a += r * inversesqrt(ds * ds * ds);
    }
    a *= G;
    vel[i] = vel[i] * damping + vec4(a * dt, 0);
    pos[i] += vel[i] * dt;
}
